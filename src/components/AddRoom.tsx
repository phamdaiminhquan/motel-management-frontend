import { useState } from "react";
import { ArrowLeft, AlertTriangle, CheckCircle } from "lucide-react"; // Import icon c·∫£nh b√°o & th√†nh c√¥ng

interface AddRoomProps {
  houses: { _id: string; name: string }[];
}

const AddRoom: React.FC<AddRoomProps> = ({ houses }) => {
  const [selectedHouse, setSelectedHouse] = useState<string | null>(null);
  const [formData, setFormData] = useState({ roomName: "", roomPrice: "" });
  const [error, setError] = useState<string | null>(null); // L∆∞u th√¥ng b√°o l·ªói
  const [success, setSuccess] = useState<string | null>(null); // L∆∞u th√¥ng b√°o th√†nh c√¥ng

  const handleAddRoom = async () => {
    if (!selectedHouse) {
      setError("Vui l√≤ng ch·ªçn nh√† tr∆∞·ªõc khi th√™m ph√≤ng.");
      return;
    }
    if (!formData.roomName.trim()) {
      setError("T√™n ph√≤ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }
    if (!formData.roomPrice.trim() || isNaN(Number(formData.roomPrice))) {
      setError("Gi√° ph√≤ng ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá.");
      return;
    }

    setError(null); // X√≥a l·ªói n·∫øu d·ªØ li·ªáu h·ª£p l·ªá

    try {
      const response = await fetch("/api/rooms", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...formData, houseId: selectedHouse }),
      });

      if (!response.ok) throw new Error("Kh√¥ng th·ªÉ th√™m ph√≤ng, vui l√≤ng th·ª≠ l·∫°i.");

      console.log("üö™ Th√™m ph√≤ng th√†nh c√¥ng");
      setSuccess("üö™ Ph√≤ng ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
      setFormData({ roomName: "", roomPrice: "" }); // Reset form
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m ph√≤ng:", error);
      setError("Kh√¥ng th·ªÉ th√™m ph√≤ng, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div>
      <h2 className="text-lg font-bold">Th√™m Ph√≤ng üö™</h2>

      {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
      {error && (
        <div className="bg-red-100 text-red-700 p-2 rounded mb-3 flex items-center">
          <AlertTriangle size={18} className="mr-2" />
          <span>{error}</span>
        </div>
      )}

      {/* Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng n·∫øu c√≥ */}
      {success && (
        <div className="bg-green-100 text-green-700 p-2 rounded mb-3 flex items-center">
          <CheckCircle size={18} className="mr-2" />
          <span>{success}</span>
        </div>
      )}

      {/* Ch·ªçn nh√† tr∆∞·ªõc */}
      {!selectedHouse ? (
        <div>
          <p className="text-gray-600 mb-2">Ch·ªçn nh√† ƒë·ªÉ th√™m ph√≤ng:</p>
          <div className="max-h-40 overflow-y-auto border rounded">
            {houses.length === 0 ? (
              <p className="text-red-500 p-3">Hi·ªán t·∫°i ch∆∞a c√≥ nh√† n√†o trong h·ªá th·ªëng, vui l√≤ng th√™m nh√† tr∆∞·ªõc!</p>
            ) : (
              <div>
                {houses.map((house) => (
                  <button
                    key={house._id}
                    onClick={() => setSelectedHouse(house._id)}
                    className="block w-full text-left p-2 border-b hover:bg-gray-200"
                  >
                    {house.name}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      ) : (
        <div>
          {/* N√∫t quay l·∫°i ch·ªçn nh√† */}
          <div className="flex items-center mb-2">
            <button onClick={() => setSelectedHouse(null)} className="p-2 hover:bg-gray-200 rounded-full">
              <ArrowLeft size={20} />
            </button>
            <p className="text-gray-700 ml-2">
              ƒêang t·∫°o ph√≤ng cho: <strong>{houses.find((house) => house._id === selectedHouse)?.name}</strong>
            </p>
          </div>

          {/* Nh·∫≠p th√¥ng tin ph√≤ng */}
          <input
            type="text"
            placeholder="T√™n ph√≤ng"
            className="w-full p-2 border rounded mt-2"
            value={formData.roomName}
            onChange={(e) => setFormData({ ...formData, roomName: e.target.value })}
          />
          <input
            type="number"
            placeholder="Gi√° thu√™"
            className="w-full p-2 border rounded mt-2"
            value={formData.roomPrice}
            onChange={(e) => setFormData({ ...formData, roomPrice: e.target.value })}
          />

          {/* N√∫t Th√™m */}
          <button onClick={handleAddRoom} className="mt-4 w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition">
            Th√™m
          </button>
        </div>
      )}
    </div>
  );
};

export default AddRoom;
