import { useState } from "react";
import { ArrowLeft, AlertTriangle, CheckCircle } from "lucide-react"; // Import icon c·∫£nh b√°o & th√†nh c√¥ng
import { getHouseRooms, House, Room } from "../../services/api"; // API l·∫•y danh s√°ch ph√≤ng
import { addBed, addBedOfHouse, BedInput, BedOfHouseInput } from "../../services/bedService";

interface AddBedProps {
  houses: House[];
}

const AddBed: React.FC<AddBedProps> = ({ houses }) => {
  const [selectedHouse, setSelectedHouse] = useState<House | null>(null); // Nh√† ƒë∆∞·ª£c ch·ªçn
  const [rooms, setRooms] = useState<Room[]>([]); // Danh s√°ch ph√≤ng
  const [selectedRoom, setSelectedRoom] = useState<Room | null>(null); // Ph√≤ng ƒë∆∞·ª£c ch·ªçn
  const [bedName, setBedName] = useState(""); // D·ªØ li·ªáu form nh·∫≠p gi∆∞·ªùng
  const [error, setError] = useState<string | null>(null); // L∆∞u th√¥ng b√°o l·ªói
  const [success, setSuccess] = useState<string | null>(null); // L∆∞u th√¥ng b√°o th√†nh c√¥ng

  // Khi ch·ªçn nh√†, n·∫øu l√† nh√† th∆∞·ªùng th√¨ l·∫•y danh s√°ch ph√≤ng
  const handleSelectHouse = async (house: House) => {
    setSelectedHouse(house);
    setSelectedRoom(null); // Reset ph√≤ng khi ch·ªçn l·∫°i nh√†
    setBedName(""); // Reset t√™n gi∆∞·ªùng khi ƒë·ªïi nh√†
    setError(null); // X√≥a l·ªói c≈© n·∫øu c√≥
    setSuccess(null); // X√≥a th√¥ng b√°o th√†nh c√¥ng n·∫øu c√≥

    if (house.type === "Th∆∞·ªùng") {
      try {
        const roomsData = await getHouseRooms(house._id); // G·ªçi API l·∫•y danh s√°ch ph√≤ng
        setRooms(roomsData);
      } catch (error) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch ph√≤ng:", error);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng.");
      }
    }
  };

  // Khi b·∫•m "Th√™m", ki·ªÉm tra ƒë·∫ßu v√†o tr∆∞·ªõc khi g·ª≠i
  const handleAddBed = async () => {
    if (!selectedHouse) {
      setError("Vui l√≤ng ch·ªçn nh√† tr∆∞·ªõc khi th√™m gi∆∞·ªùng.");
      return;
    }

    if (selectedHouse.type === "Th∆∞·ªùng" && !selectedRoom) {
      setError("Vui l√≤ng ch·ªçn ph√≤ng tr∆∞·ªõc khi th√™m gi∆∞·ªùng.");
      return;
    }

    if (!bedName.trim()) {
      setError("T√™n gi∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }

    setError(null); // X√≥a l·ªói n·∫øu d·ªØ li·ªáu h·ª£p l·ªá

    try {
      let success = false;

      if (selectedHouse.type === "Th∆∞·ªùng") {
        // S·ª≠ d·ª•ng bi·∫øn trung gian thay v√¨ setState ngay
        const tempBedInput: BedInput = { name: bedName, status: "Tr·ªëng", roomId: selectedRoom!._id };
        success = await addBed(tempBedInput);
      } else {
        // S·ª≠ d·ª•ng bi·∫øn trung gian cho nh√† KTX
        const tempBedOfHouseInput: BedOfHouseInput = { name: bedName, status: "Tr·ªëng", houseId: selectedHouse._id };
        console.log(tempBedOfHouseInput); // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i API
        success = await addBedOfHouse(tempBedOfHouseInput, selectedHouse._id);
      }

      if (success) {
        console.log(`üõèÔ∏è ${bedName} Th√™m th√†nh c√¥ng`);
        setSuccess(`üõèÔ∏è ${bedName} ƒë∆∞·ª£c th√™m th√†nh c√¥ng!`);
        setBedName(""); // L√†m m·ªõi form nh·∫≠p gi∆∞·ªùng
      } else {
        throw new Error(`Kh√¥ng th·ªÉ th√™m gi∆∞·ªùng ${bedName}, vui l√≤ng th·ª≠ l·∫°i.`);
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi th√™m gi∆∞·ªùng ${bedName}:`, error);
      setError(`Kh√¥ng th·ªÉ th√™m gi∆∞·ªùng ${bedName}, vui l√≤ng th·ª≠ l·∫°i.`);
    }
  };



  return (
    <div>
      <h2 className="text-lg font-bold">Th√™m Gi∆∞·ªùng üõèÔ∏è</h2>

      {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
      {error && (
        <div className="bg-red-100 text-red-700 p-2 rounded mb-3 flex items-center">
          <AlertTriangle size={18} className="mr-2" />
          <span>{error}</span>
        </div>
      )}

      {/* Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng */}
      {success && (
        <div className="bg-green-100 text-green-700 p-2 rounded mb-3 flex items-center">
          <CheckCircle size={18} className="mr-2" />
          <span>{success}</span>
        </div>
      )}

      {/* Ch·ªçn nh√† tr∆∞·ªõc */}
      {!selectedHouse ? (
        <div>
          <p className="text-gray-600 mb-2">Ch·ªçn nh√† ƒë·ªÉ th√™m gi∆∞·ªùng:</p>
          <div className="max-h-40 overflow-y-auto border rounded">
            {houses.length === 0 ? (
              <p className="text-red-500 p-3"> Hi·ªán t·∫°i ch∆∞a c√≥ nh√† n√†o trong h·ªá th·ªëng, vui l√≤ng th√™m nh√† tr∆∞·ªõc!</p>
            ) : (
              <div>
                {houses.map((house) => (
                  <button key={house._id} onClick={() => handleSelectHouse(house)}
                    className="block w-full text-left p-2 border-b hover:bg-gray-200">
                    {house.name}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      ) : selectedHouse.type === "Th∆∞·ªùng" && !selectedRoom ? (
        <div>
          {/* N√∫t quay l·∫°i ch·ªçn nh√† */}
          <div className="flex items-center mb-2">
            <button onClick={() => setSelectedHouse(null)} className="p-2 hover:bg-gray-200 rounded-full">
              <ArrowLeft size={20} />
            </button>
            <p className="text-gray-700 ml-2">Nh√†: <strong>{selectedHouse.name}</strong></p>
          </div>

          {/* Ch·ªçn ph√≤ng ƒë·ªÉ th√™m gi∆∞·ªùng */}
          <p className="text-gray-600 mb-2">Ch·ªçn ph√≤ng ƒë·ªÉ th√™m gi∆∞·ªùng:</p>
          <div className="max-h-40 overflow-y-auto border rounded">
            {rooms.length === 0 ? (
              <p className="text-red-500 p-3"> Hi·ªán t·∫°i nh√† n√†y ch∆∞a c√≥ ph√≤ng n√†o, vui l√≤ng th√™m ph√≤ng tr∆∞·ªõc!</p>
            ) : (
              <div>
                {rooms.map((room) => (
                  <button key={room._id} onClick={() => setSelectedRoom(room)}
                    className="block w-full text-left p-2 border-b hover:bg-gray-200">
                    {room.name}
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>
      ) : (
        <div>
          {/* N√∫t quay l·∫°i ch·ªçn ph√≤ng */}
          <div className="flex items-center mb-2">
            <button onClick={() => setSelectedRoom(null)} className="p-2 hover:bg-gray-200 rounded-full">
              <ArrowLeft size={20} />
            </button>
            <p className="text-gray-700 ml-2">Nh√†: <strong>{selectedHouse.name}</strong></p>
            {selectedRoom && <p className="text-gray-700 ml-2">Ph√≤ng: <strong>{selectedRoom.name}</strong></p>}
          </div>

          {/* Nh·∫≠p th√¥ng tin gi∆∞·ªùng */}
          <input type="text" placeholder="T√™n gi∆∞·ªùng"
            className="w-full p-2 border rounded mt-2"
            value={bedName}
            onChange={(e) => setBedName(e.target.value)}
          />

          {/* N√∫t Th√™m */}
          <button onClick={handleAddBed} className="mt-4 w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition">
            Th√™m
          </button>
        </div>
      )}
    </div>
  );
};

export default AddBed;
